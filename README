*J'ai travaillé avec la version java jdk 11.
*J'ai écrit mes codes dans l'application intellij idea.
*J'ai fait des tests en parallèle.
*J'ai utilisé le concept oop en java avec projet.
*J'ai créé 3 fonctionnalités différentes dans le projet et ajouté les étapes nécessaires au fichier de fonctionnalités.


1) Agile est dynamique car il prend les commentaires des clients et
S'il y a de nouveaux ajouts, c'est-à-dire de nouvelles fonctionnalités, sur lesquels travailler, Agile est ouvert à tout ceux que nous ajouterons à l'application.
Agile peut être mis à jour.
En Agile, nous pouvons tester la santé de l'application à chaque étape.
Agile s'adapte plus facilement aux changements.

=> Avec la méthodologie Agile, nous avons des spritns entre 2 et 4 semaines. Ces sprints commencent par *Sprint planing*. Dans ce sprint, les us storys  dans le backlog de sprint sont notées avec la méthode de Fibonacci et notées avec le JoKer  Pointeur sur google et us storys sont partagés. La réunion *Sprint Grooming* est organisée conformément aux exigences avant la Sprint planing. Dans ce sprint, l'analyse des données et des questions sont posées. Cela se fait parfois une fois, parfois deux fois, selon la nécessité. Le sprint commence par la Sprint planing. Chaque matin devient *Daily Scrum*. Lors de cette réunion, nous parlons de ce que nous avons fait hier et de ce que nous allons faire aujourd'hui Avons-nous rencontré des problèmes (empêchement ou bloqueur) ? Vers la fin du sprint, une présentation de démonstration est faite aux autorités de l'entreprise *Sprint Review*. Le testeur QA joue un rôle actif. Les StakeHolder participent également.
*Sprint Retro* est fait en dernier. Une évaluation générale est faite. Les avantages et les inconvénients sont discutés. En termes de faire la lumière sur le prochain sprint.


Test Strategy


Objectives
1-Page de connexion testée et test positif et négatif vérifié
2- Des tests de page de connexion positifs et négatifs ont été effectués.
3- La satisfaction client en bas de page a été vérifiée.
4- Les modules dans la section Navbar en haut de la page a vérifié



Scope

1.	J'ai utilisé du Cucumber.
2.	J'ai fait des tests en parallèle.
3.	Après avoir créé mon framework, j'ai ajouté les classes nécessaires après avoir créé les pages nécessaires.
4.	J'ai obtenu les dépendances requises pour pom.xml à partir de la page de  repository maven.
5.	J'ai ajouté les classes nécessaires  que le runners à la page des utilities.


Environnement de test

1-J'ai utilisé le système d'exploitation Windows.
2-j'ai travaillé avec java jdk 11.0
3-Intellij idea

Outils de test

1-	Comme je n'ai pas fait de tests de performances ou autres, je ne peux pas vous dire si c'est open source ou commercial.

Risk Analysis


1-Le site doit être soigneusement examiné pour les risques. Étant donné que ce site est un site de démarrage, il y avait des risques dans de nombreuses parties.

2-Par exemple, lorsque vous avez essayé d'effectuer une transaction et que vous avez été interrompu, il l'a ajoutée au panier.






